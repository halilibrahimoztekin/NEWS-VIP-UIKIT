//
//  HomeViewController.swift
//  NEWSVIPERUIKIT
//
//  Created by Halil İbrahim Öztekin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit






protocol HomeDisplayLogic: AnyObject
{
    func displayPrepareCollectionView(articles: [Home.News.Article]?)
    func displayNavigateNewsDetail()
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
   
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    @IBOutlet var collectionView: UICollectionView!
    fileprivate var newsDataSource: NewsDataSource?
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchNews()
    }
    
    
    func fetchNews(){
        interactor?.fetchNews()
    }
   
    
    func displayNavigateNewsDetail() {
        
    }
    
    func displayPrepareCollectionView(articles: [Home.News.Article]?) {
        if let articles = articles {
            
            DispatchQueue.main.async {
                let datasource = NewsDataSource(collectionView: self.collectionView, array: articles)
                self.newsDataSource = datasource
                
                self.newsDataSource?.collectionItemSelectionHandler = { [weak self] indexPath in
                    
                    self?.interactor?.setSelectArticle(indexPath: indexPath)
                }
                
                self.collectionView.reloadData()
            }
            
        }
    }
    
}
